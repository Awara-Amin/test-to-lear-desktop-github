Things to remind myself

box-sizing: border-box;

gird 
/* layout */
.grid-container {
  display: grid;
  grid-template-areas:
    "header"
    "main"
    "footer";
  /* after selecting the areas, now its time to select columns and rows */
  grid-template-columns: 1fr; /* 1 fragment,  this website has only one column*/
  /*                 header  main   footer*/
  grid-template-rows: 5rem 1fr 5rem;
  height: 100%;
  /*  */
}
/* this header below is like inside of above header, like placeholder */
header {
  grid-area: header;
  background-color: #203040;
}

main {
  grid-area: main;
  padding: 1rem;
}

footer {
  grid-area: footer;
  background-color: #203040;
  color: #ffffff;
}


make like him
images
error message doesnt appear
props.history.push >> for redirecting
when i delete all items inside the cart doesnt show me the message to go back for shopping


min 1!:40 he added some into getIgnore > I did too but if you face any problem see here

kaka example lo template leteral (which allow combining text and variavles )
app.listen(port, () =>{
    console.log(`server at http://localhost:${port}`);
});


checked


import mongoose from 'mongoose';

const orderSchema = new mongoose.Schema({
    orderItems: [
                    {
                    name: {type: String, required: true},
                    qty: {type: Number, required: true},
                    image: {type: String, required: true},
                    price: {type: Number, required: true},
                    product: {
                        type: mongoose.Schema.Types.ObjectId,
                        ref: 'Product',
                        required: true,
                },
                }, 
                  ],
    shippingAddress: {
       fullName: {
           type: String, 
        //    required: true
        },
       address:{
            type: String, 
            required: true
        },
        city: {
            type: String, 
            // required: true
        },
        postalCode: {
            type: String, 
            required: true
        },
        country: {
            type: String, 
            required: true
        },
        },
   paymentMethod: {
       type: String,
       required: true
   },
   paymentResult:{
    id: String,
    status: String,
    update_time: String,
    email_address: String,
   },
   
   itemsPrice:{
       type: Number,
    //    required: true
   },
   shippingPrice:{
    type: Number,
    // required: true
},
    taxPrice:{
    type: Number,
    required: true
},
    totalPrice:{
    type: Number,
    required: true
},
    user:{type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true},
    isPaid: { type: Boolean, default: false},
    paidAt: { type: Date},
    isDelivered: {type: Boolean, default: false},
    deliveredAt: { type: Date},

}, {
    timestamps: true,
}
);

const Order = mongoose.model('Order', orderSchema);
export default Order;


https://github.com/basir/amazona/pull/32/files





<li>
                                <div>
                                Size 
                                <select 
                                    value={size} 
                                    // onChange={(e) => setSize(e.target.value)}>
                                    onChange={handleSizeChange}>
                                            <option value="size">Size</option>
                                            <option value="xl">XS</option>
                                            <option value="s">S</option>
                                            <option value="m">M</option>
                                            <option value="l">L</option>
                                            <option value="xl">XL</option>
                                        
                                </select>
                                {/* <p>{product.size}</p> */}

                                </div>
                                
                            </li>



{/* <li>
                <div className="row">
                  <div>
                    <strong>Order Total</strong>
                  </div>
                  {!discount ? (
                    <div>
                      <strong>${cart.totalPrice.toFixed(2)}</strong>
                    </div>
                  ) : (
                    <div>
                      <div>
                        <span>
                          <strong>Discount amonut is </strong>
                        </span>
                        <span>
                          <strong>${cart.totalPrice * discount * 0.01}</strong>
                        </span>
                      </div>
                      <div>
                        <strong>
                          ${cart.totalPrice - cart.totalPrice * discount * 0.01}
                        </strong>
                      </div>
                    </div>
                  )}
                </div>
              </li> */}





/////////////////////////////////////////////////////////////////////////////////////////

              import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  createProduct,
  deleteProduct,
  listProducts,
} from "../actions/productActions";
import { Link } from "react-router-dom";
import { useParams } from "react-router-dom";
import LoadingBox from "../components/LoadingBox";
import MessageBox from "../components/MessageBox";
import {
  PRODUCT_CREATE_RESET,
  PRODUCT_DELETE_RESET,
} from "../constants/productConstants";
// import product from '../components/Product'
import Row from "react-bootstrap/Row";
import Col from "react-bootstrap/Col";
import Button from "react-bootstrap/Button";
import Table from "../../node_modules/react-bootstrap/esm/Table";

export default function ProductListScreen(props) {
  const { pageNumber = 1 } = useParams();

  const sellerMode = props.match.path.indexOf("/seller") >= 0;

  const productList = useSelector((state) => state.productList);
  // const {loading, error, products} = productList;
  const { loading, error, products, page, pages } = productList;

  const productCreate = useSelector((state) => state.productCreate);
  const {
    loading: loadingCreate,
    error: errorCreate,
    success: successCreate,
    product: createdProduct,
  } = productCreate;

  const productDelete = useSelector((state) => state.productDelete);
  const {
    loading: loadingDelete,
    error: errorDelete,
    success: successDelete,
  } = productDelete;

  const userSignin = useSelector((state) => state.userSignin);
  const { userInfo } = userSignin;

  const dispatch = useDispatch();

  useEffect(() => {
    if (successCreate) {
      // itmeans that i have successfully created product
      dispatch({ type: PRODUCT_CREATE_RESET });
      props.history.push(`/product/${createdProduct._id}/edit`);
    }
    if (successDelete) {
      dispatch({ type: PRODUCT_DELETE_RESET });
    }
    // dispatch(listProducts());
    dispatch(
      listProducts({ seller: sellerMode ? userInfo._id : "", pageNumber })
    );
  }, [
    createdProduct,
    dispatch,
    props.history,
    sellerMode,
    successCreate,
    successDelete,
    userInfo._id,
    pageNumber,
  ]);

  const deleteHandler = (product) => {
    if (window.confirm("Are you sure you wonna delete this mate?")) {
      /// todo: dispatch delete action
      dispatch(deleteProduct(product._id));
    }
  };

  const createHandler = () => {
    dispatch(createProduct());
  };

  return (
    <div>
      <Row>
        <Col>
          <h1>Products</h1>
        </Col>
        <Col className="col text-end">
          <div>
            <Button type="button" onClick={createHandler}>
              Create Product
            </Button>
          </div>
        </Col>
      </Row>
      {loadingDelete && <LoadingBox></LoadingBox>}
      {errorDelete && <MessageBox variant="danger">{errorDelete}</MessageBox>}

      {loadingCreate && <LoadingBox></LoadingBox>}
      {errorCreate && <MessageBox variant="danger">{errorCreate}</MessageBox>}

      {loading ? (
        <LoadingBox></LoadingBox>
      ) : error ? (
        <MessageBox variant="danger">{error}</MessageBox>
      ) : (
        <>
          <Table striped bordered hover size="sm" variant="dark">
            <thead>
              <tr>
                {/* <th>ID</th> */}
                <th>NAME</th>
                <th>PRICE</th>
                <th>SIZE</th>
                <th>CATEGORY</th>
                <th>BRAND</th>
                <th>ACTIONS</th>
              </tr>
            </thead>
            <tbody>
              {products.map((product) => (
                <tr key={product._id}>
                  {/* <td>{product._id}</td> */}
                  <td>{product.name}</td>
                  <td>{product.price}</td>
                  <td>{product.size}</td>
                  <td>{product.category}</td>
                  <td>{product.brand}</td>
                  <td>
                    <Button
                      type="button"
                      variant="light"
                      // className="small"
                      onClick={() =>
                        props.history.push(`/product/${product._id}/edit`)
                      }
                    >
                      Edite
                    </Button>
                    <Button
                      type="button"
                      variant="light"
                      // className="small"
                      onClick={() => deleteHandler(product)}
                    >
                      Delete
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
          {/* <table className="table">
            <thead>
              <tr>
                <th>ID</th>
                <th>NAME</th>
                <th>PRICE</th>
                <th>SIZE</th>
                <th>CATEGORY</th>
                <th>BRAND</th>
                <th>ACTIONS</th>
              </tr>
            </thead>

            <tbody>
              {products.map((product) => (
                <tr key={product._id}>
                  <td>{product._id}</td>
                  <td>{product.name}</td>
                  <td>{product.price}</td>
                  <td>{product.size}</td>
                  <td>{product.category}</td>
                  <td>{product.brand}</td>
                  <td>
                    <Button
                      type="button"
                      variant="light"
                      // className="small"
                      onClick={() =>
                        props.history.push(`/product/${product._id}/edit`)
                      }
                    >
                      Edite
                    </Button>
                    <Button
                      type="button"
                      variant="light"
                      // className="small"
                      onClick={() => deleteHandler(product)}
                    >
                      Delete
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table> */}

          <div className="">
            {[...Array(pages).keys()].map((x) => (
              <Link
                className={x + 1 === page ? "btn text-bold" : "btn"}
                key={x + 1}
                to={`/productlist/pageNumber/${x + 1}`}
              >
                {x + 1}
              </Link>
            ))}
          </div>
        </>
      )}
    </div>
  );
}


///////////////////////////////
//cartScreen.js
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import { addToCart, removeFromCart } from "../actions/cartActions";
import MessageBox from "../components/MessageBox";
// bootstrap
import { Helmet } from "react-helmet";
import ListGroup from "react-bootstrap/ListGroup";
import Button from "react-bootstrap/Button";
import Card from "react-bootstrap/Card";
import Row from "react-bootstrap/Row";
import Col from "react-bootstrap/Col";
// import { applyCoupon } from "../actions/userActions";

export default function CartScreen(props) {
  const productId = props.match.params.id;

  const queryString = require("query-string");
  // const [coupon, setCoupon] = useState("");

  const [totalAfterDiscount, setTotalAfterDiscount] = useState("");
  const [discountError, setDiscountError] = useState("");

  // mine kaka 2022
  // const qty = props.location.search
  //    ? Number(props.location.search.split("=")[1])
  //    :
  //    1;

  const qty = props.location.search
    ? Number(queryString.parse(props.location.search).qty)
    : 1;

  const size = props.location.search
    ? String(queryString.parse(props.location.search).size)
    : 1;

  const color = props.location.search
    ? String(queryString.parse(props.location.search).color)
    : 1;

  //    const size = props.location.search
  //    ? String(props.location.search.split("=").[2])
  //    :
  //    1;

  const cart = useSelector((state) => state.cart);
  const { cartItems } = cart;
  console.log("cartItems kaka");
  console.log(cartItems);

  // const couponInput = useSelector((state) => state.couponValidation);
  // const { userCouponInfo } = couponInput;
  // console.log("what is this kaka");
  // console.log(userCouponInfo);

  const dispatch = useDispatch();
  useEffect(() => {
    if (productId) {
      dispatch(addToCart(productId, qty, size, color));
    }
  }, [dispatch, productId, qty, size, color]);

  const removeFromCartHandler = (id) => {
    // detele action here kaka
    dispatch(removeFromCart(id));
  };

  const checkoutHandler = () => {
    props.history.push("/signin?redirect=/shipping");
  };

  //   const updateCartHandler = () => {
  //     console.log("create the function");
  //   };
  // const applyDiscountCoupon = () => {
  //   console.log("send coupon to backend kaka ", coupon);
  //   applyCoupon(coupon).then((res) => {
  //     console.log("RES ON COUPON APPLIED", res.data);
  //   });
  // };
  // const showApplyCoupon = () => {
  //   <>
  //     <input
  //       onChange={(e) => setCoupon(e.target.value)}
  //       value={coupon}
  //       type="text"
  //       className="form-control"
  //     ></input>
  //     <button onClick={applyDiscountCoupon} className="btn btn-primary mt-2">
  //       Apply
  //     </button>
  //   </>;
  // };

  return (
    <div>
      <Helmet>
        <title>Shopping Cart</title>
      </Helmet>
      <h1>Shopping Cart</h1>
      <Row>
        <Col md={8}>
          {cartItems.length === 0 ? (
            <MessageBox>
              Cart is empty. <Link to="/">Go Shopping</Link>
            </MessageBox>
          ) : (
            <ListGroup>
              {cartItems.map((item) => (
                <ListGroup.Item key={item.product}>
                  <Row className="align-items-center">
                    <Col md={2}>
                      <img
                        src={item.image}
                        alt={item.name}
                        className="img-fluid rounded img-thumbnail"
                      ></img>{" "}
                      <Link to={`/product/${item.product}`}>{item.name}</Link>
                    </Col>
                    <Col md={1}>
                      <span>
                        <strong>Size</strong>
                      </span>
                      <span className="sizeInCartScreen">{item.size}</span>
                    </Col>
                    <Col md={1}>
                      <span>
                        <strong>Color</strong>
                      </span>
                      <span className="sizeInCartScreen">{item.color}</span>
                    </Col>

                    <Col md={2}>${item.price}</Col>
                    <Col md={2}>
                      <select
                        value={item.qty}
                        onChange={(e) =>
                          dispatch(
                            addToCart(item.product, Number(e.target.value))
                          )
                        }
                      >
                        {[...Array(item.countInStock).keys()].map((x) => (
                          <option key={x + 1} value={x + 1}>
                            {x + 1}
                          </option>
                        ))}
                      </select>
                    </Col>

                    {/* <div>${item.price}</div> */}
                    <Col md={2}>
                      {/* <Button variant="light"> */}
                      <Button
                        onClick={() => removeFromCartHandler(item.product)}
                        variant="light"
                      >
                        <i className="fa fa-trash"></i>
                      </Button>
                    </Col>
                  </Row>
                </ListGroup.Item>
              ))}
            </ListGroup>
          )}
        </Col>
        <Col md={4}>
          <Card>
            <Card.Body>
              <ListGroup variant="flush">
                {/* <ListGroup.Item>
                  <h4>
                    Subtotal ({cartItems.reduce((a, c) => a + c.qty, 0)} items)
                    : ${cartItems.reduce((a, c) => a + c.price * c.qty, 0)}
                  </h4>
                </ListGroup.Item> */}

                {/* <ListGroup.Item>
                  <h4>Have you got our coupon?</h4>
                  <>
                    <input
                      onChange={(e) => setCoupon(e.target.value)}
                      value={coupon}
                      type="text"
                      className="form-control"
                    ></input>
                    <button
                      onClick={applyDiscountCoupon}
                      className="btn btn-primary mt-2"
                    >
                      Apply
                    </button>
                  </>
                </ListGroup.Item> */}
              </ListGroup>

              {/* lets use this for coupon */}
              <ListGroup variant="flush">
                <ListGroup.Item>
                  <h4>
                    Subtotal ({cartItems.reduce((a, c) => a + c.qty, 0)} items)
                    : ${cartItems.reduce((a, c) => a + c.price * c.qty, 0)}
                  </h4>
                </ListGroup.Item>
                <ListGroup.Item>
                  <div className="d-grid">
                    <Button
                      type="button"
                      variant="primary"
                      onClick={checkoutHandler}
                      disabled={cartItems.length === 0}
                    >
                      Proceed to Checkout
                    </Button>
                  </div>
                </ListGroup.Item>
              </ListGroup>
            </Card.Body>
          </Card>
        </Col>

        {/* <div className="col-1"> */}
        {/* <div className="card card-body"> */}
        {/* <ul> */}
        {/* <li>
                  <h2>
                    Subtotal ({cartItems.reduce((a, c) => a + c.qty, 0)} items)
                    : ${cartItems.reduce((a, c) => a + c.price * c.qty, 0)}
                  </h2>
                </li> */}

        {/* <li>
                  <button
                    type="button"
                    onClick={checkoutHandler}
                    className="primary block"
                    disabled={cartItems.length === 0}
                  >
                    Proceed to Checkout
                  </button>
                </li> */}
        {/* </ul> */}
        {/* </div> */}
        {/* </div> */}
      </Row>
    </div>
  );
}
/////////////////////////////////////
//productScreen.js 
import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
// import data from "../data";
import { Link } from "react-router-dom";
import { createReview, detailsProduct } from "../actions/productActions";
import Rating from "../components/Rating";
import LoadingBox from "../components/LoadingBox";
import MessageBox from "../components/MessageBox";
import { PRODUCT_REVIEW_CREATE_RESET } from "../constants/productConstants";
// import { addToFavorite } from "../actions/favoriteCartActions";
import FloatingLabel from "react-bootstrap/FloatingLabel";

// bootStrap part
import Row from "react-bootstrap/Row";
import Col from "react-bootstrap/Col";
import ListGroup from "react-bootstrap/ListGroup";
import Badge from "react-bootstrap/Badge";
import Card from "react-bootstrap/Card";
import Button from "react-bootstrap/Button";
// import { Helmet } from "react-helmet-async";
import { Helmet } from "react-helmet";
import Form from "../../node_modules/react-bootstrap/esm/Form";

export default function ProductScreen(props) {
  console.log("in ProductScreen.js new-1");
  console.log(props);
  const dispatch = useDispatch();
  const productId = props.match.params.id;
  const [qty, setQty] = useState(1);
  const [size, setSize] = useState("");
  const [color, setColor] = useState("");
  const productDetails = useSelector((state) => state.productDetails);
  const { loading, error, product } = productDetails;
  console.log("this kaka now in productScreen.js");
  console.log(product);

  const userSignin = useSelector((state) => state.userSignin);
  const { userInfo } = userSignin;

  const productReviewCreate = useSelector((state) => state.productReviewCreate);
  const {
    loading: loadingReviewCreate,
    error: errorReviewCreate,
    success: successReviewCreate,
  } = productReviewCreate;

  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState("");
  const [selectedImage, setSelectedImage] = useState("");

  useEffect(() => {
    if (successReviewCreate) {
      window.alert("Review Submitted Successfully");
      setRating("");
      setComment("");
      dispatch({ type: PRODUCT_REVIEW_CREATE_RESET });
    }
    dispatch(detailsProduct(productId));
  }, [dispatch, productId, successReviewCreate]);

  const addToCartHandler = () => {
    props.history.push(
      `/cart/${productId}?qty=${qty}&size=${size}&color=${color}`
    );
    // props.history.push(`/cart/${productId}?qty=${qty}`);
    // props.history.push(`/cart/${productId}?qty=${qty}&size=${size}`);
  };

  const handlingSizeChange = (e) => {
    setSize(e.target.value);
    console.log(size);
  };
  console.log(size);

  const handlingColorChange = (e) => {
    setColor(e.target.value);
    console.log(color);
  };

  const submitHandler = (e) => {
    e.preventDefault();
    if (comment && rating) {
      dispatch(
        createReview(productId, { rating, comment, name: userInfo.name })
      );
    } else {
      alert("Please enter comment and rating sir");
    }
  };

  return loading ? (
    <LoadingBox></LoadingBox>
  ) : error ? (
    <MessageBox variant="danger">{error}</MessageBox>
  ) : (
    <div>
      <Row>
        <Col md={6}>
          <img
            className="img-large"
            // src={product.image}
            src={selectedImage || product.image}
            alt={product.name}
          ></img>
        </Col>

        <Col md={3}>
          <ListGroup variant="flush">
            <ListGroup.Item>
              <Helmet>
                <title>{product.name}</title>
              </Helmet>
              <h1>{product.name}</h1>
            </ListGroup.Item>

            <ListGroup.Item>
              <Rating
                rating={product.rating}
                numReviews={product.numReviews}
              ></Rating>
            </ListGroup.Item>

            <ListGroup.Item>Price : ${product.price}</ListGroup.Item>

            <ListGroup.Item>
              <Row xs={1} md={2} className="g-2">
                {[product.image, ...product.images].map((x) => (
                  <Col key={x}>
                    <Card>
                      <Button
                        className="thumbnail"
                        type="button"
                        variant="light"
                        onClick={() => setSelectedImage(x)}
                      >
                        <Card.Img variant="top" src={x} alt="product" />
                      </Button>
                    </Card>
                  </Col>
                ))}
              </Row>
            </ListGroup.Item>

            <ListGroup.Item>
              Description:
              <p>{product.description}</p>
            </ListGroup.Item>
          </ListGroup>
        </Col>

        <Col md={3}>
          <Card>
            <Card.Body>
              <ListGroup variant="flush">
                <ListGroup.Item>
                  <Row>
                    <Col>Price:</Col>
                    <Col>${product.price}</Col>
                  </Row>
                </ListGroup.Item>
                <ListGroup.Item>
                  <Row>
                    <Col>Status:</Col>
                    <Col>
                      {product.countInStock > 0 ? (
                        <Badge bg="success">In Stock</Badge>
                      ) : (
                        <Badge bg="danger">Unavailable</Badge>
                      )}
                    </Col>
                  </Row>
                </ListGroup.Item>

                <ListGroup.Item>
                  <Row>
                    <Col>Color:</Col>
                    <Col>
                      <select value={color} onChange={handlingColorChange}>
                        <option value="">Select</option>
                        {product.color?.map((anyColor, index) => (
                          <option key={index} value={anyColor}>
                            {anyColor}
                          </option>
                        ))}
                      </select>
                    </Col>
                  </Row>
                </ListGroup.Item>

                <ListGroup.Item>
                  <Row>
                    <Col>Size:</Col>
                    <Col>
                      <select value={size} onChange={handlingSizeChange}>
                        <option value="">Select</option>
                        {product.size?.map((anySize, index) => (
                          <option key={index} value={anySize}>
                            {anySize}
                          </option>
                        ))}
                      </select>
                    </Col>
                  </Row>
                </ListGroup.Item>

                {product.countInStock > 0 && (
                  <ListGroup.Item>
                    <Row>
                      <Col>Qty:</Col>
                      <Col>
                        <select
                          value={qty}
                          onChange={(e) => setQty(e.target.value)}
                        >
                          {[...Array(product.countInStock).keys()].map((x) => (
                            <option key={x + 1} value={x + 1}>
                              {x + 1}
                            </option>
                          ))}
                        </select>
                      </Col>
                    </Row>
                  </ListGroup.Item>
                )}

                {product.countInStock > 0 && (
                  <ListGroup.Item>
                    <div className="d-grid">
                      <Button onClick={addToCartHandler} variant="primary">
                        Add to Cart
                      </Button>
                    </div>
                  </ListGroup.Item>
                )}
              </ListGroup>
            </Card.Body>
          </Card>
        </Col>
      </Row>
      <Link to="/">Back to result</Link>

      {/* review part kaka*/}
      <div className="my-3">
        <h2 id="reviews">Reviews</h2>
        <div className="mb-3">
          {product.reviews.length === 0 && (
            <MessageBox>There is no review</MessageBox>
          )}
        </div>
        <ListGroup>
          {product.reviews.map((review) => (
            <ListGroup.Item key={review._id}>
              <strong>{review.name}</strong>

              <Rating rating={review.rating} caption=" "></Rating>
              <p>{review.createdAt.substring(0, 10)}</p>
              <p>{review.comment}</p>
            </ListGroup.Item>
          ))}
        </ListGroup>
        <div className="my-3">
          {userInfo ? (
            <form className="form" onSubmit={submitHandler}>
              <h2>Write a customer review</h2>

              <Form.Group className="mb-3" controlId="rating">
                <Form.Label>Rating</Form.Label>
                <Form.Select
                  arial-label="Rating"
                  value={rating}
                  onChange={(e) => setRating(e.target.value)}
                >
                  <option value="">Select...</option>
                  <option value="1">1- Poor</option>
                  <option value="2">2- Fair</option>
                  <option value="3">3- Good</option>
                  <option value="4">4- Very good</option>
                  <option value="5">5- Excelent</option>
                </Form.Select>
              </Form.Group>

              <FloatingLabel
                controlId="comment"
                label="Comments"
                className="mb-3"
              >
                <Form.Control
                  as="textarea"
                  placeholder="Leave a comment here"
                  value={comment}
                  onChange={(e) => setComment(e.target.value)}
                />
              </FloatingLabel>

              <div className="mb-3">
                <Button disabled={loadingReviewCreate} type="submit">
                  Submit
                </Button>
                {loadingReviewCreate && <LoadingBox></LoadingBox>}
              </div>
            </form>
          ) : (
            <MessageBox>
              Please{" "}
              <Link to={`/signin?redirect=/product/${product.id}`}>
                Sign In
              </Link>
              {""}
              to write a review
            </MessageBox>
          )}
        </div>
      </div>
    </div>
  );
}
//////////////////////////////////////////
by click added to basket works 
<div>
          <OverlayTrigger placement="left" overlay={renderTooltipc}>
            <li className="preview-color">
              {product.countInStock === 0 ? (
                <i
                  // disable={false}
                  class="fa fa-shopping-basket eachIcon "
                  onClick={(e) => dispatch(addToCart(product._id, 1))}
                  disabled
                ></i>
              ) : (
                <i className="fa fa-shopping-basket eachIcon"></i>
                // <AddShoppingCart
                //   onClick={(e) => dispatch(addToCart(product._id, 1))}
                // />
              )}
            </li>
          </OverlayTrigger>
        </div>

  //////////////////////////////////////////
  product.js 
  import React from "react";
import { useSelector } from "react-redux";
import { Link } from "react-router-dom";
import Rating from "./Rating";
import Card from "react-bootstrap/Card";
import { addToCart } from "../actions/cartActions";
import Button from "react-bootstrap/Button";
// import axios from "axios";
import Row from "react-bootstrap/Row";
import Col from "react-bootstrap/Col";

export default function Product(props) {
  const { product } = props;

  console.log("first props in Product.js");
  console.log(product._id);

  const cart = useSelector((state) => state.cart);
  const { cartItems } = cart;
  console.log(cartItems);

  const discountRate = (product.discount / 100) * product.price;

  const addToCartHandler = () => {
    alert("wait it does not work now, sorry");
  };

  // const addToCartHandler = async (item) => {
  //   const existItem = cartItems.find((x) => x._id === product.product);
  //   const quantity = existItem ? existItem.quantity + 1 : 1;
  //   const { data } = await axios.get(`/api/products/${item._id}`);
  //   if (data.countInStock < quantity) {
  //     window.alert("Sorry. Product is out of stock");
  //     return;
  //   }
  //   ctxDispatch({
  //     type: "CART_ADD_ITEM",
  //     payload: { ...item, quantity },
  //   });
  // };

  return (
    <Card className="card" key={product._id}>
      <Link to={`/product/${product._id}`}>
        <img
          src={product.image}
          className="card-img-top justyfyingImages"
          alt={product.name}
        />
      </Link>

      <Card.Body>
        <Row>
          <Col>
            <Link to={`/product/${product._id}`}>
              <h8>{product.name}</h8>
            </Link>
          </Col>
          {/* <Col>
            <Link to={`/favorite/${product._id}`}>
              <div>
                <i className="fa fa-heart-o"></i>
              </div>
            </Link>
          </Col> */}
        </Row>
        <Rating
          rating={product.rating}
          numReviews={product.numReviews}
        ></Rating>

        {product.discount > 0 ? (
          <div>
            <Card.Text
              style={{
                textDecorationLine: "line-through",
                textDecorationStyle: "solid",
                color: "red",
              }}
            >
              ${product.price}
            </Card.Text>
            <Card.Text>% {discountRate} Discount</Card.Text>
            <Card.Text>${product.price - discountRate} Current Price</Card.Text>
          </div>
        ) : (
          <Card.Text>${product.price}</Card.Text>
        )}

        {/* <Button>Add to cart</Button> */}
        {/* {product.countInStock === 0 ? (
          <Button variant="light" disabled>
            Out of stock kase xare
          </Button>
        ) : (
          <Button onClick={() => addToCartHandler(product)}>Add to cart</Button>
        )} */}
      </Card.Body>
      <div className="iconsOverProducts">
        {/* <div className="iconsOverProducts-opocity"> */}
        <div>
          <Link to={`/favorite/${product._id}`}>
            <i className="fa fa-heart-o eachIcon"></i>
          </Link>
        </div>

        <div>
          <i className="fa fa-heart-o eachIcon"></i>
        </div>

        {product.countInStock === 0 ? (
          <div>
            <i className="fa fa-shopping-cart eachIcon aa2"></i>
          </div>
        ) : (
          <div>
            <i
              onClick={() => addToCartHandler(product)}
              className="fa fa-shopping-cart eachIcon"
            ></i>
          </div>
          // <Button variant="light" disabled>
          //   Out of stock kase xare
          // </Button>
          // <Button onClick={() => addToCartHandler(product)}>Add to cart</Button>
        )}
        {/* <div>
          <i onClick={() => addToCartHandler(product)} className="fa fa-heart-o eachIcon"></i>
        </div> */}
      </div>
      {/* </div> */}
    </Card>
  );
}
/////////////////////////////////////////////