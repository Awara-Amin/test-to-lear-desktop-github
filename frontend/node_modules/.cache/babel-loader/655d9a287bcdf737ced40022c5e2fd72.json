{"ast":null,"code":"var _jsxFileName = \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/amazona-1/amazona/frontend/src/screens/CategoryEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport Axios from \"axios\";\nimport { detailsCategory, updateCategory } from \"../actions/categoryActions\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport { PRODUCT_UPDATE_RESET } from \"../constants/productConstants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CategoryEditScreen(props) {\n  _s();\n\n  // getting the categoryId from the URL\n  const categoryId = props.match.params.id;\n  const [name, setName] = useState(\"\"); //   const [price, setPrice] = useState(\"\");\n\n  const [image, setImage] = useState(\"\"); //   const [images, setImages] = useState([]);\n  //   const [category, setCategory] = useState(\"\");\n  //   const [countInStock, setCountInStock] = useState(\"\");\n  //   const [brand, setBrand] = useState(\"\");\n  //   const [size, setSize] = useState(\"\");\n  //   const [color, setColor] = useState(\"\");\n\n  const [description, setDescription] = useState(\"\");\n  const categoryDetails = useSelector(state => state.categoryDetails);\n  const {\n    loading,\n    error,\n    category\n  } = categoryDetails;\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = productUpdate;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (successUpdate) {\n      //  dispatch({type: PRODUCT_UPDATE_RESET});\n      props.history.push(\"/productlist\");\n    } // if category didnt exist\n\n\n    if (!category || category._id !== categoryId || successUpdate) {\n      dispatch({\n        type: PRODUCT_UPDATE_RESET\n      });\n      dispatch(detailsCategory(categoryId));\n    } else {\n      setName(category.name); //   setPrice(product.price);\n\n      setImage(category.image); //   setImages(product.images);\n      //   setCategory(product.category);\n      //   setCountInStock(product.countInStock);\n      //   setBrand(product.brand);\n\n      setDescription(category.description);\n    } // so when we have change in any of these, the useEffect function runs\n\n  }, [category, dispatch, categoryId, successUpdate, props.history]);\n\n  const submitHandler = e => {\n    e.preventDefault(); // todo: dispatch update product\n\n    dispatch(updateCategory({\n      _id: categoryId,\n      name,\n      // price,\n      image,\n      // images,\n      // category,\n      // brand,\n      // size,\n      // color,\n      // countInStock,\n      description\n    }));\n  }; //   const [loadingUpload, setLoadingUpload] = useState(false);\n  //   const [errorUpload, setErrorUpload] = useState(\"\");\n  //   const userSignin = useSelector((state) => state.userSignin);\n  //   const { userInfo } = userSignin;\n  //   const uploadFileHandler = async (e, forImages) => {\n  //     const file = e.target.files[0];\n  //     const bodyFormData = new FormData();\n  //     bodyFormData.append(\"image\", file);\n  //     // setLoadingUpload(true);\n  //     try {\n  //       const { data } = await Axios.post(\"/api/uploads\", bodyFormData, {\n  //         headers: {\n  //           \"Content-Type\": \"multipart/form-data\",\n  //           Authorization: `Bearer ${userInfo.token}`,\n  //         },\n  //       });\n  //       //   images\n  //       if (forImages) {\n  //         setImages([...images, data]);\n  //       } else {\n  //         setImage(data);\n  //         // setLoadingUpload(false);\n  //       }\n  //     } catch (error) {\n  //       setErrorUpload(error.message);\n  //       //   setLoadingUpload(false);\n  //     }\n  //   };\n  //   const deleteFileHandler = async (fileName) => {\n  //     setImages(images.filter((x) => x !== fileName));\n  //     console.log(\"hi\");\n  //   };\n  // UI part\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Edit Category \", categoryId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"name\",\n            type: \"text\",\n            placeholder: \"Enter Name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"image\",\n            children: \"Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"image\",\n            type: \"text\",\n            placeholder: \"Image\",\n            value: image,\n            onChange: e => setImage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"description\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"description\",\n            rows: \"3\",\n            type: \"text\",\n            placeholder: \"Enter description\",\n            value: description,\n            onChange: e => setDescription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"primary\",\n            type: \"submit\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CategoryEditScreen, \"sJ6MmmZPKUa4dE+OIc9i73+TBNE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = CategoryEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryEditScreen\");","map":{"version":3,"sources":["/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/amazona-1/amazona/frontend/src/screens/CategoryEditScreen.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Axios","detailsCategory","updateCategory","LoadingBox","MessageBox","PRODUCT_UPDATE_RESET","CategoryEditScreen","props","categoryId","match","params","id","name","setName","image","setImage","description","setDescription","categoryDetails","state","loading","error","category","productUpdate","loadingUpdate","errorUpdate","success","successUpdate","dispatch","history","push","_id","type","submitHandler","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport Axios from \"axios\";\nimport { detailsCategory, updateCategory } from \"../actions/categoryActions\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport { PRODUCT_UPDATE_RESET } from \"../constants/productConstants\";\n\nexport default function CategoryEditScreen(props) {\n  // getting the categoryId from the URL\n  const categoryId = props.match.params.id;\n\n  const [name, setName] = useState(\"\");\n  //   const [price, setPrice] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  //   const [images, setImages] = useState([]);\n  //   const [category, setCategory] = useState(\"\");\n  //   const [countInStock, setCountInStock] = useState(\"\");\n  //   const [brand, setBrand] = useState(\"\");\n  //   const [size, setSize] = useState(\"\");\n  //   const [color, setColor] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const categoryDetails = useSelector((state) => state.categoryDetails);\n  const { loading, error, category } = categoryDetails;\n\n  const productUpdate = useSelector((state) => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n  } = productUpdate;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (successUpdate) {\n      //  dispatch({type: PRODUCT_UPDATE_RESET});\n      props.history.push(\"/productlist\");\n    }\n\n    // if category didnt exist\n    if (!category || category._id !== categoryId || successUpdate) {\n      dispatch({ type: PRODUCT_UPDATE_RESET });\n      dispatch(detailsCategory(categoryId));\n    } else {\n      setName(category.name);\n      //   setPrice(product.price);\n      setImage(category.image);\n      //   setImages(product.images);\n      //   setCategory(product.category);\n      //   setCountInStock(product.countInStock);\n      //   setBrand(product.brand);\n      setDescription(category.description);\n    }\n    // so when we have change in any of these, the useEffect function runs\n  }, [category, dispatch, categoryId, successUpdate, props.history]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    // todo: dispatch update product\n    dispatch(\n      updateCategory({\n        _id: categoryId,\n        name,\n        // price,\n        image,\n        // images,\n        // category,\n        // brand,\n        // size,\n        // color,\n        // countInStock,\n        description,\n      })\n    );\n  };\n\n  //   const [loadingUpload, setLoadingUpload] = useState(false);\n  //   const [errorUpload, setErrorUpload] = useState(\"\");\n  //   const userSignin = useSelector((state) => state.userSignin);\n  //   const { userInfo } = userSignin;\n\n  //   const uploadFileHandler = async (e, forImages) => {\n  //     const file = e.target.files[0];\n  //     const bodyFormData = new FormData();\n  //     bodyFormData.append(\"image\", file);\n  //     // setLoadingUpload(true);\n  //     try {\n  //       const { data } = await Axios.post(\"/api/uploads\", bodyFormData, {\n  //         headers: {\n  //           \"Content-Type\": \"multipart/form-data\",\n  //           Authorization: `Bearer ${userInfo.token}`,\n  //         },\n  //       });\n\n  //       //   images\n  //       if (forImages) {\n  //         setImages([...images, data]);\n  //       } else {\n  //         setImage(data);\n  //         // setLoadingUpload(false);\n  //       }\n  //     } catch (error) {\n  //       setErrorUpload(error.message);\n  //       //   setLoadingUpload(false);\n  //     }\n  //   };\n\n  //   const deleteFileHandler = async (fileName) => {\n  //     setImages(images.filter((x) => x !== fileName));\n  //     console.log(\"hi\");\n  //   };\n\n  // UI part\n  return (\n    <div>\n      <form className=\"form\" onSubmit={submitHandler}>\n        <div>\n          <h1>Edit Category {categoryId}</h1>\n        </div>\n        {/* {loadingUpdate && <LoadingBox></LoadingBox>}\n        {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>} */}\n\n        {loading ? (\n          <LoadingBox></LoadingBox>\n        ) : error ? (\n          <MessageBox variant=\"danger\">{error}</MessageBox>\n        ) : (\n          <>\n            <div>\n              <label htmlFor=\"name\">Name</label>\n              <input\n                id=\"name\"\n                type=\"text\"\n                placeholder=\"Enter Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></input>\n            </div>\n\n            {/* <div>\n              <label htmlFor=\"price\">Price</label>\n              <input\n                id=\"price\"\n                type=\"text\"\n                placeholder=\"Enter Price\"\n                value={price}\n                onChange={(e) => setPrice(e.target.value)}\n              ></input>\n            </div> */}\n\n            <div>\n              <label htmlFor=\"image\">Image</label>\n              <input\n                id=\"image\"\n                type=\"text\"\n                placeholder=\"Image\"\n                value={image}\n                onChange={(e) => setImage(e.target.value)}\n              ></input>\n            </div>\n\n            {/* <div>\n              <label htmlFor=\"imagefile\">Upload Image </label>\n              <input\n                type=\"file\"\n                id=\"imagefile\"\n                label=\"Upload Image\"\n                onChange={uploadFileHandler}\n              ></input>\n              {loadingUpload && <LoadingBox></LoadingBox>}\n            </div> */}\n\n            {/* additional image */}\n            {/* <div>\n              <label htmlFor=\"additionalImage\">Additional Images</label>\n              <textarea id=\"additionalImage\" value={images}></textarea>\n              {images.length === 0 && <MessageBox>No image kako</MessageBox>}\n              {images.map((x, index) => (\n                <li key={index}>\n                  {x}\n                  <button onClick={() => deleteFileHandler(x)}>\n                    <i className=\"fa fa-times-circle\"></i>\n                  </button>\n                </li>\n              ))}\n            </div> */}\n\n            {/* another additinal image */}\n            {/* <div>\n              <label htmlFor=\"additionalImageFile\">\n                Upload Additional Image\n              </label>\n              <input\n                type=\"file\"\n                id=\"additionalImageFile\"\n                label=\"Upload additional Image\"\n                onChange={(e) => uploadFileHandler(e, true)}\n              ></input>\n\n              {loadingUpload && <LoadingBox></LoadingBox>}\n            </div> */}\n\n            {/* <div>\n              <label htmlFor=\"category\">Category</label>\n              <input\n                id=\"category\"\n                type=\"text\"\n                placeholder=\"Enter category\"\n                value={category}\n                onChange={(e) => setCategory(e.target.value)}\n              ></input>\n            </div> */}\n\n            {/* <div>\n              <label htmlFor=\"brand\">Brand</label>\n              <input\n                id=\"brand\"\n                type=\"text\"\n                placeholder=\"Enter Brand\"\n                value={brand}\n                onChange={(e) => setBrand(e.target.value)}\n              ></input>\n            </div> */}\n\n            {/* <div>\n              <label htmlFor=\"size\">Size</label>\n              <input\n                id=\"size\"\n                name=\"size\"\n                type=\"text\"\n                placeholder=\"Enter Size: Small, Medium, Large\"\n                value={size}\n                onChange={(e) => setSize(e.target.value.split(\",\"))}\n              ></input>\n            </div> */}\n\n            {/* <div>\n              <label htmlFor=\"color\">Color</label>\n              <input\n                id=\"color\"\n                name=\"color\"\n                type=\"text\"\n                placeholder=\"Enter Color: Such as: Red, Green, White, or so\"\n                value={color}\n                onChange={(e) => setColor(e.target.value.split(\",\"))}\n              ></input>\n            </div> */}\n\n            {/* <div>\n              <label htmlFor=\"countInStock\">Count In Stock</label>\n              <input\n                id=\"countInStock\"\n                type=\"text\"\n                placeholder=\"Enter countInStock\"\n                value={countInStock}\n                onChange={(e) => setCountInStock(e.target.value)}\n              ></input>\n            </div> */}\n\n            <div>\n              <label htmlFor=\"description\">Description</label>\n              <textarea\n                id=\"description\"\n                rows=\"3\"\n                type=\"text\"\n                placeholder=\"Enter description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              ></textarea>\n            </div>\n\n            <div>\n              <label></label>\n              <button className=\"primary\" type=\"submit\">\n                Update\n              </button>\n            </div>\n          </>\n        )}\n      </form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}