{"ast":null,"code":"import _objectSpread from \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/src/screens/SupportScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport MessageBox from '../components/MessageBox'; // all the users as an array\n\nvar allUsers = [];\nvar allMessages = [];\nvar allSelectedUser = {};\nconsole.log(allSelectedUser);\nvar ENDPOINT = window.location.host.indexOf('localhost') >= 0 ? 'http://127.0.0.1:5000' : window.location.host;\nexport default function SupportScreen() {\n  var _this = this;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedUser = _useState2[0],\n      setSelectedUser = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      socket = _useState4[0],\n      setSocket = _useState4[1];\n\n  var uiMessagesRef = useRef(null);\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messageBody = _useState6[0],\n      setMessageBody = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      messages = _useState8[0],\n      setMessages = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      users = _useState10[0],\n      setUsers = _useState10[1];\n\n  var userSignin = useSelector(function (state) {\n    return state.userSignin;\n  });\n  var userInfo = userSignin.userInfo;\n  useEffect(function () {\n    if (uiMessagesRef.current) {\n      uiMessagesRef.current.scrollBy({\n        top: uiMessagesRef.current.clientHeight,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n\n    if (!socket) {\n      var sk = socketIOClient(ENDPOINT);\n      setSocket(sk);\n      sk.emit('onLogin', {\n        _id: userInfo._id,\n        name: userInfo.name,\n        isAdmin: userInfo.isAdmin\n      });\n      sk.on('message', function (data) {\n        if (allSelectedUser._id === data._id) {\n          allMessages = [].concat(_toConsumableArray(allMessages), [data]);\n        } else {\n          var existUser = allUsers.find(function (user) {\n            return user._id === data._id;\n          });\n\n          if (existUser) {\n            allUsers = allUsers.map(function (user) {\n              return user._id === existUser._id ? _objectSpread({}, user, {\n                unread: true\n              }) : user;\n            });\n            setUsers(allUsers);\n          }\n        }\n\n        setMessages(allMessages);\n      });\n      sk.on('updateUser', function (updatedUser) {\n        var existUser = allUsers.find(function (user) {\n          return user._id === updatedUser._id;\n        });\n\n        if (existUser) {\n          allUsers = allUsers.map(function (user) {\n            return user._id === existUser._id ? updatedUser : user;\n          });\n          setUsers(allUsers);\n        } else {\n          allUsers = [].concat(_toConsumableArray(allUsers), [updatedUser]);\n          setUsers(allUsers);\n        }\n      });\n      sk.on('listUsers', function (updatedUsers) {\n        allUsers = updatedUsers;\n        setUsers(allUsers);\n      });\n      sk.on('selectUser', function (user) {\n        allMessages = user.messages;\n        setMessages(allMessages);\n      });\n    }\n  }, [messages, socket, users, userInfo]);\n\n  var selectUser = function selectUser(user) {\n    allSelectedUser = user;\n    setSelectedUser(allSelectedUser);\n    var existUser = allUsers.find(function (x) {\n      return x._id === user._id;\n    });\n\n    if (existUser) {\n      allUsers = allUsers.map(function (x) {\n        return x._id === existUser._id ? _objectSpread({}, x, {\n          unread: false\n        }) : x;\n      });\n      setUsers(allUsers);\n    }\n\n    socket.emit('onUserSelected', user);\n  };\n\n  var submitHandler = function submitHandler(e) {\n    e.preventDefault();\n\n    if (!messageBody.trim()) {\n      alert('Error. Please type message.');\n    } else {\n      allMessages = [].concat(_toConsumableArray(allMessages), [{\n        body: messageBody,\n        name: userInfo.name\n      }]);\n      setMessages(allMessages);\n      setMessageBody('');\n      setTimeout(function () {\n        socket.emit('onMessage', {\n          body: messageBody,\n          name: userInfo.name,\n          isAdmin: userInfo.isAdmin,\n          _id: selectedUser._id\n        });\n      }, 1000);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row top full-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-1 support-users\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, users.filter(function (x) {\n    return x._id !== userInfo._id;\n  }).length === 0 && /*#__PURE__*/React.createElement(MessageBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"No Online User Found\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, users.filter(function (x) {\n    return x._id !== userInfo._id;\n  }).map(function (user) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: user._id,\n      className: user._id === selectedUser._id ? '  selected' : '  ',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"block\",\n      type: \"button\",\n      onClick: function onClick() {\n        return selectUser(user);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, user.name), /*#__PURE__*/React.createElement(\"span\", {\n      className: user.unread ? 'unread' : user.online ? 'online' : 'offline',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }));\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-3 support-messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, !selectedUser._id ? /*#__PURE__*/React.createElement(MessageBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, \"Select a user to start chat\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, \"Chat with \", selectedUser.name, \" \")), /*#__PURE__*/React.createElement(\"ul\", {\n    ref: uiMessagesRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, messages.length === 0 && /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 41\n    }\n  }, \"No message.\"), messages.map(function (msg, index) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 19\n      }\n    }, \"\".concat(msg.name, \": \")), \" \", msg.body);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: messageBody,\n    onChange: function onChange(e) {\n      return setMessageBody(e.target.value);\n    },\n    type: \"text\",\n    placeholder: \"type message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, \"Send\"))))));\n}","map":{"version":3,"sources":["/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/src/screens/SupportScreen.js"],"names":["React","useEffect","useRef","useState","socketIOClient","useSelector","MessageBox","allUsers","allMessages","allSelectedUser","console","log","ENDPOINT","window","location","host","indexOf","SupportScreen","selectedUser","setSelectedUser","socket","setSocket","uiMessagesRef","messageBody","setMessageBody","messages","setMessages","users","setUsers","userSignin","state","userInfo","current","scrollBy","top","clientHeight","left","behavior","sk","emit","_id","name","isAdmin","on","data","existUser","find","user","map","unread","updatedUser","updatedUsers","selectUser","x","submitHandler","e","preventDefault","trim","alert","body","setTimeout","filter","length","online","msg","index","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport MessageBox from '../components/MessageBox';\n\n// all the users as an array\nlet allUsers = [];\nlet allMessages = [];\nlet allSelectedUser = {};\nconsole.log(allSelectedUser);\n\nconst ENDPOINT =\n  window.location.host.indexOf('localhost') >= 0\n    ? 'http://127.0.0.1:5000'\n    : window.location.host;\n\nexport default function SupportScreen() {\n\n  const [selectedUser, setSelectedUser] = useState({});\n  const [socket, setSocket] = useState(null);\n  const uiMessagesRef = useRef(null);\n  const [messageBody, setMessageBody] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const userSignin = useSelector((state) => state.userSignin);\n  const { userInfo } = userSignin;\n\n  useEffect(() => {\n    if (uiMessagesRef.current) {\n      uiMessagesRef.current.scrollBy({\n        top: uiMessagesRef.current.clientHeight,\n        left: 0,\n        behavior: 'smooth',\n      });\n    }\n    \n    if (!socket) {\n      const sk = socketIOClient(ENDPOINT);\n      setSocket(sk);\n      sk.emit('onLogin', {\n        _id: userInfo._id,\n        name: userInfo.name,\n        isAdmin: userInfo.isAdmin,\n      });\n      sk.on('message', (data) => {\n        if (allSelectedUser._id === data._id) {\n          allMessages = [...allMessages, data];\n        } else {\n          const existUser = allUsers.find((user) => user._id === data._id);\n          if (existUser) {\n            allUsers = allUsers.map((user) =>\n              user._id === existUser._id ? { ...user, unread: true } : user\n            );\n            setUsers(allUsers);\n          }\n        }\n        setMessages(allMessages);\n      });\n      sk.on('updateUser', (updatedUser) => {\n        const existUser = allUsers.find((user) => user._id === updatedUser._id);\n        if (existUser) {\n          allUsers = allUsers.map((user) =>\n            user._id === existUser._id ? updatedUser : user\n          );\n          setUsers(allUsers);\n        } else {\n          allUsers = [...allUsers, updatedUser];\n          setUsers(allUsers);\n        }\n      });\n      sk.on('listUsers', (updatedUsers) => {\n        allUsers = updatedUsers;\n        setUsers(allUsers);\n      });\n      sk.on('selectUser', (user) => {\n        allMessages = user.messages;\n        setMessages(allMessages);\n      });\n    }\n  }, [messages, socket, users, userInfo]);\n\n\n  \n  const selectUser = (user) => {\n    allSelectedUser = user;\n    setSelectedUser(allSelectedUser);\n    const existUser = allUsers.find((x) => x._id === user._id);\n    if (existUser) {\n      allUsers = allUsers.map((x) =>\n        x._id === existUser._id ? { ...x, unread: false } : x\n      );\n      setUsers(allUsers);\n    }\n    socket.emit('onUserSelected', user);\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (!messageBody.trim()) {\n      alert('Error. Please type message.');\n    } else {\n      allMessages = [\n        ...allMessages,\n        { body: messageBody, name: userInfo.name },\n      ];\n      setMessages(allMessages);\n      setMessageBody('');\n      setTimeout(() => {\n        socket.emit('onMessage', {\n          body: messageBody,\n          name: userInfo.name,\n          isAdmin: userInfo.isAdmin,\n          _id: selectedUser._id,\n        });\n      }, 1000);\n    }\n  };\n\n\n\n  return (\n    <div className=\"row top full-container\">\n        {/* this is to show users */}\n      <div className=\"col-1 support-users\">\n        {users.filter((x) => x._id !== userInfo._id).length === 0 && (\n          <MessageBox>No Online User Found</MessageBox>\n        )}\n        <ul>\n          {users\n            .filter((x) => x._id !== userInfo._id)\n            .map((user) => (\n              <li\n                key={user._id}\n                className={user._id === selectedUser._id ? '  selected' : '  '}\n              >\n                <button\n                  className=\"block\"\n                  type=\"button\"\n                  onClick={() => selectUser(user)}\n                >\n                  {user.name}\n                </button>\n                <span\n                  className={\n                    user.unread ? 'unread' : user.online ? 'online' : 'offline'\n                  }\n                />\n              </li>\n            ))}\n        </ul>\n      </div>\n\n     {/* this is to show messages */}\n      <div className=\"col-3 support-messages\">\n        {!selectedUser._id ? (\n          <MessageBox>Select a user to start chat</MessageBox>\n        ) : (\n          <div>\n            <div className=\"row\">\n              <strong>Chat with {selectedUser.name} </strong>\n            </div>\n            <ul ref={uiMessagesRef}>\n              {messages.length === 0 && <li>No message.</li>}\n              {messages.map((msg, index) => (\n                <li key={index}>\n                  <strong>{`${msg.name}: `}</strong> {msg.body}\n                </li>\n              ))}\n            </ul>\n            <div>\n              <form onSubmit={submitHandler} className=\"row\">\n                <input\n                  value={messageBody}\n                  onChange={(e) => setMessageBody(e.target.value)}\n                  type=\"text\"\n                  placeholder=\"type message\"\n                />\n                <button type=\"submit\">Send</button>\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}