{"ast":null,"code":"var _jsxFileName = \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/react/amazona/frontend/src/screens/MapScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libs = ['places'];\nconst defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nexport default function MapScreen(props) {\n  _s();\n\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await Axios('/api/config/google');\n      setGoogleApiKey(data); // call this from bellow\n\n      getUserCurrentLocation();\n    };\n\n    fetch();\n  }, []);\n\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n\n  const dispatch = useDispatch();\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n\n    if (places && places.length === 1) {\n      // dispatch select action\n      dispatch({\n        type: USER_ADDRESS_MAP_CONFIRM,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id\n        }\n      });\n      alert('location selected successfully.');\n      props.history.push('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    //   first do this\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-container\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      liberaries: libs,\n      googleMapsApiKey: googleApiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        id: \"smaple-map\",\n        mapContainerStyle: {\n          height: \"100%\",\n          width: \"100%\"\n        },\n        center: center,\n        zoom: 15,\n        onload: onLoad,\n        onIdle: onIdle,\n        children: [/*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: onLoadPlaces,\n          onPlacesChanged: onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter your adress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"primary\",\n              onClick: onConfirm,\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onLoad: onMarkerLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 8\n  }, this);\n}\n\n_s(MapScreen, \"FvQoWY5xbeizQachYmSbuS4Mpc8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = MapScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapScreen\");","map":{"version":3,"sources":["/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/react/amazona/frontend/src/screens/MapScreen.js"],"names":["React","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","LoadingBox","Axios","useDispatch","USER_ADDRESS_MAP_CONFIRM","libs","defaultLocation","lat","lng","MapScreen","props","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","fetch","data","getUserCurrentLocation","onLoad","map","current","onMarkerLoad","marker","onLoadPlaces","place","onIdle","onPlacesChanged","getPlaces","geometry","dispatch","onConfirm","places","length","type","payload","address","formatted_address","name","vicinity","googleAddressId","id","alert","history","push","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,MAAzB,EAAiCC,QAAjC,QAAgD,OAAhD;AACA,SAAQC,UAAR,EAAoBC,SAApB,EAA+BC,mBAA/B,EAAoDC,MAApD,QAAiE,wBAAjE;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,wBAAT,QAAyC,4BAAzC;;AAEA,MAAMC,IAAI,GAAG,CAAC,QAAD,CAAb;AACA,MAAMC,eAAe,GAAG;AAACC,EAAAA,GAAG,EAAE,MAAN;AAAcC,EAAAA,GAAG,EAAE,CAAC;AAApB,CAAxB;AAGA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAEtC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAACU,eAAD,CAApC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAACiB,MAAD,CAAxC;AAEA,QAAMI,MAAM,GAAGtB,MAAM,CAAC,IAAD,CAArB;AACA,QAAMuB,QAAQ,GAAGvB,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMwB,SAAS,GAAGxB,MAAM,CAAC,IAAD,CAAxB;AAGCD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM0B,KAAK,GAAG,YAAW;AACrB,YAAM;AAACC,QAAAA;AAAD,UAAS,MAAMnB,KAAK,CAAC,oBAAD,CAA1B;AACAU,MAAAA,eAAe,CAACS,IAAD,CAAf,CAFqB,CAGrB;;AACAC,MAAAA,sBAAsB;AACzB,KALD;;AAMAF,IAAAA,KAAK;AACR,GARQ,EAQP,EARO,CAAT;;AAWA,QAAMG,MAAM,GAAIC,GAAD,IAAQ;AACnBP,IAAAA,MAAM,CAACQ,OAAP,GAAiBD,GAAjB;AACH,GAFD;;AAKA,QAAME,YAAY,GAAIC,MAAD,IAAW;AAC5BR,IAAAA,SAAS,CAACM,OAAV,GAAoBE,MAApB;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAIC,KAAD,IAAU;AAC3BX,IAAAA,QAAQ,CAACO,OAAT,GAAmBI,KAAnB;AACH,GAFD;;AAKA,QAAMC,MAAM,GAAG,MAAM;AACjBd,IAAAA,WAAW,CAAC;AAACT,MAAAA,GAAG,EAAEU,MAAM,CAACQ,OAAP,CAAeZ,MAAf,CAAsBN,GAAtB,EAAN;AACCC,MAAAA,GAAG,EAAES,MAAM,CAACQ,OAAP,CAAeZ,MAAf,CAAsBL,GAAtB;AADN,KAAD,CAAX;AAEH,GAHD;;AAKA,QAAMuB,eAAe,GAAG,MAAM;AAC1B,UAAMF,KAAK,GAAGX,QAAQ,CAACO,OAAT,CAAiBO,SAAjB,GAA6B,CAA7B,EAAgCC,QAAhC,CAAyClB,QAAvD;AACAD,IAAAA,SAAS,CAAC;AAAEP,MAAAA,GAAG,EAAEsB,KAAK,CAACtB,GAAN,EAAP;AAAoBC,MAAAA,GAAG,EAAEqB,KAAK,CAACrB,GAAN;AAAzB,KAAD,CAAT;AACAQ,IAAAA,WAAW,CAAC;AAAET,MAAAA,GAAG,EAAEsB,KAAK,CAACtB,GAAN,EAAP;AAAoBC,MAAAA,GAAG,EAAEqB,KAAK,CAACrB,GAAN;AAAzB,KAAD,CAAX;AACD,GAJH;;AAME,QAAM0B,QAAQ,GAAG/B,WAAW,EAA5B;;AAEA,QAAMgC,SAAS,GAAG,MAAM;AACtB,UAAMC,MAAM,GAAGlB,QAAQ,CAACO,OAAT,CAAiBO,SAAjB,EAAf;;AACA,QAAII,MAAM,IAAIA,MAAM,CAACC,MAAP,KAAkB,CAAhC,EAAmC;AACjC;AACAH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAElC,wBADC;AAEPmC,QAAAA,OAAO,EAAE;AACPhC,UAAAA,GAAG,EAAEQ,QAAQ,CAACR,GADP;AAEPC,UAAAA,GAAG,EAAEO,QAAQ,CAACP,GAFP;AAGPgC,UAAAA,OAAO,EAAEJ,MAAM,CAAC,CAAD,CAAN,CAAUK,iBAHZ;AAIPC,UAAAA,IAAI,EAAEN,MAAM,CAAC,CAAD,CAAN,CAAUM,IAJT;AAKPC,UAAAA,QAAQ,EAAEP,MAAM,CAAC,CAAD,CAAN,CAAUO,QALb;AAMPC,UAAAA,eAAe,EAAER,MAAM,CAAC,CAAD,CAAN,CAAUS;AANpB;AAFF,OAAD,CAAR;AAWAC,MAAAA,KAAK,CAAC,iCAAD,CAAL;AACApC,MAAAA,KAAK,CAACqC,OAAN,CAAcC,IAAd,CAAmB,WAAnB;AACD,KAfD,MAeO;AACLF,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACD;AACF,GApBD;;AAwBA,QAAMxB,sBAAsB,GAAG,MAAM;AACnC;AACA,QAAI,CAAC2B,SAAS,CAACC,WAAf,EAA4B;AAC1BJ,MAAAA,KAAK,CAAC,8CAAD,CAAL;AACD,KAFD,MAEO;AACLG,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrDtC,QAAAA,SAAS,CAAC;AACRP,UAAAA,GAAG,EAAE6C,QAAQ,CAACC,MAAT,CAAgBC,QADb;AAER9C,UAAAA,GAAG,EAAE4C,QAAQ,CAACC,MAAT,CAAgBE;AAFb,SAAD,CAAT;AAIAvC,QAAAA,WAAW,CAAC;AACVT,UAAAA,GAAG,EAAE6C,QAAQ,CAACC,MAAT,CAAgBC,QADX;AAEV9C,UAAAA,GAAG,EAAE4C,QAAQ,CAACC,MAAT,CAAgBE;AAFX,SAAD,CAAX;AAID,OATD;AAUD;AACF,GAhBD;;AAoBF,SAAO5C,YAAY,gBACnB;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACI,QAAC,UAAD;AAAY,MAAA,UAAU,EAAEN,IAAxB;AAA8B,MAAA,gBAAgB,EAAEM,YAAhD;AAAA,6BACI,QAAC,SAAD;AACG,QAAA,EAAE,EAAC,YADN;AAEG,QAAA,iBAAiB,EAAI;AAAC6C,UAAAA,MAAM,EAAE,MAAT;AAAiBC,UAAAA,KAAK,EAAE;AAAxB,SAFxB;AAGG,QAAA,MAAM,EAAI5C,MAHb;AAIG,QAAA,IAAI,EAAE,EAJT;AAKG,QAAA,MAAM,EAAEU,MALX;AAMG,QAAA,MAAM,EAAEO,MANX;AAAA,gCAQI,QAAC,mBAAD;AACI,UAAA,MAAM,EAAEF,YADZ;AAEI,UAAA,eAAe,EAAEG,eAFrB;AAAA,iCAIQ;AAAA,oCACI;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,SAAS,EAAC,SAAhC;AAA0C,cAAA,OAAO,EAAEI,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,gBARJ,eAoBQ,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEpB,QAAlB;AAA4B,UAAA,MAAM,EAAEW;AAApC;AAAA;AAAA;AAAA;AAAA,gBApBR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADmB,gBA6BhB,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,UA7BH;AA+BH;;GA5HuBjB,S;UA+CDN,W;;;KA/CCM,S","sourcesContent":["import React,{useEffect, useRef, useState} from 'react';\nimport {LoadScript, GoogleMap, StandaloneSearchBox, Marker} from '@react-google-maps/api'\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\n\nconst libs = ['places'];\nconst defaultLocation = {lat: 45.516, lng: -73.56};\n\n\nexport default function MapScreen(props) {\n\n   const [googleApiKey, setGoogleApiKey] = useState('');\n   const [center, setCenter] = useState(defaultLocation);\n   const [location, setLocation] = useState(center);\n\n   const mapRef = useRef(null);\n   const placeRef = useRef(null);\n   const markerRef = useRef(null);\n\n\n    useEffect(() => {\n        const fetch = async () =>{\n            const {data} = await Axios('/api/config/google');\n            setGoogleApiKey(data);\n            // call this from bellow\n            getUserCurrentLocation();\n        }\n        fetch();\n    },[]);\n\n\n    const onLoad = (map) =>{\n        mapRef.current = map;\n    }\n\n\n    const onMarkerLoad = (marker) =>{\n        markerRef.current = marker;\n    }\n\n    const onLoadPlaces = (place) =>{\n        placeRef.current = place;\n    }\n\n\n    const onIdle = () => {\n        setLocation({lat: mapRef.current.center.lat(),\n                     lng: mapRef.current.center.lng()})\n    }\n\n    const onPlacesChanged = () => {\n        const place = placeRef.current.getPlaces()[0].geometry.location;\n        setCenter({ lat: place.lat(), lng: place.lng() });\n        setLocation({ lat: place.lat(), lng: place.lng() });\n      };\n\n      const dispatch = useDispatch();\n\n      const onConfirm = () => {\n        const places = placeRef.current.getPlaces();\n        if (places && places.length === 1) {\n          // dispatch select action\n          dispatch({\n            type: USER_ADDRESS_MAP_CONFIRM,\n            payload: {\n              lat: location.lat,\n              lng: location.lng,\n              address: places[0].formatted_address,\n              name: places[0].name,\n              vicinity: places[0].vicinity,\n              googleAddressId: places[0].id,\n            },\n          });\n          alert('location selected successfully.');\n          props.history.push('/shipping');\n        } else {\n          alert('Please enter your address');\n        }\n      };\n\n\n\n      const getUserCurrentLocation = () => {\n        //   first do this\n        if (!navigator.geolocation) {\n          alert('Geolocation os not supported by this browser');\n        } else {\n          navigator.geolocation.getCurrentPosition((position) => {\n            setCenter({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n            setLocation({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          });\n        }\n      };\n\n\n\n    return googleApiKey ? ( \n    <div className=\"full-container\">\n        <LoadScript liberaries={libs} googleMapsApiKey={googleApiKey}>\n            <GoogleMap\n               id=\"smaple-map\"\n               mapContainerStyle = {{height: \"100%\", width: \"100%\"}} \n               center = {center}\n               zoom={15}\n               onload={onLoad}\n               onIdle={onIdle}\n            >\n                <StandaloneSearchBox \n                    onLoad={onLoadPlaces}\n                    onPlacesChanged={onPlacesChanged}\n                    >\n                        <div>\n                            <input type=\"text\" placeholder=\"Enter your adress\"></input>\n                            <button type=\"button\" className=\"primary\" onClick={onConfirm}>\n                                Confirm\n                            </button>\n                        </div>\n                    </StandaloneSearchBox>\n\n                    <Marker position={location} onLoad={onMarkerLoad}></Marker>\n            </GoogleMap>\n        </LoadScript>\n\n    </div>\n        \n    ): <LoadingBox></LoadingBox>\n\n}\n"]},"metadata":{},"sourceType":"module"}