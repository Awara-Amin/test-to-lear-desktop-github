{"ast":null,"code":"import Axios from \"axios\";\nimport { CATEGORY_CREATE_FAIL, CATEGORY_CREATE_REQUEST, CATEGORY_CREATE_SUCCESS, CATEGORY_DETAILS_FAIL, CATEGORY_DETAILS_REQUEST, CATEGORY_DETAILS_SUCCESS, CATEGORY_LIST_FAIL, CATEGORY_LIST_REQUEST, CATEGORY_LIST_SUCCESS, CATEGORY_UPDATE_FAIL, CATEGORY_UPDATE_REQUEST, CATEGORY_UPDATE_SUCCESS } from \"../constants/categoryConstants\"; // my way, Fuad only has added authrization info\n// export const listCategories = () => async (dispatch) => {\n//   dispatch({\n//     type: CATEGORY_LIST_REQUEST,\n//   });\n//   try {\n//     const { data } = await Axios.get(\"/api/categories\");\n//     dispatch({ type: CATEGORY_LIST_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({ type: CATEGORY_LIST_FAIL, payload: error.message });\n//   }\n// };\n\nexport const listCategories = () => async (dispatch, getState) => {\n  dispatch({\n    type: CATEGORY_LIST_REQUEST\n  });\n\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get(\"/api/categories\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: CATEGORY_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: CATEGORY_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createCategory = () => async (dispatch, getState) => {\n  dispatch({\n    type: CATEGORY_CREATE_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  console.log(userInfo);\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/categories\", {}, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: CATEGORY_CREATE_SUCCESS,\n      payload: data.category\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: CATEGORY_CREATE_FAIL,\n      payload: message\n    });\n  }\n}; // we need detailsCategory for the time when we do edite category\n\nexport const detailsCategory = categoryId => async dispatch => {\n  dispatch({\n    type: CATEGORY_DETAILS_REQUEST,\n    payload: categoryId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/categories/${categoryId}`);\n    dispatch({\n      type: CATEGORY_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; //\n\nexport const updateCategory = category => async (dispatch, getState) => {\n  dispatch({\n    type: CATEGORY_UPDATE_REQUEST,\n    payload: category\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.put(`/api/categories/${category._id}`, category, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: CATEGORY_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: CATEGORY_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/amazona-1/amazona/frontend/src/actions/categoryActions.js"],"names":["Axios","CATEGORY_CREATE_FAIL","CATEGORY_CREATE_REQUEST","CATEGORY_CREATE_SUCCESS","CATEGORY_DETAILS_FAIL","CATEGORY_DETAILS_REQUEST","CATEGORY_DETAILS_SUCCESS","CATEGORY_LIST_FAIL","CATEGORY_LIST_REQUEST","CATEGORY_LIST_SUCCESS","CATEGORY_UPDATE_FAIL","CATEGORY_UPDATE_REQUEST","CATEGORY_UPDATE_SUCCESS","listCategories","dispatch","getState","type","userSignin","userInfo","data","get","headers","Authorization","token","payload","error","message","response","createCategory","console","log","post","category","detailsCategory","categoryId","updateCategory","put","_id"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\n\nimport {\n  CATEGORY_CREATE_FAIL,\n  CATEGORY_CREATE_REQUEST,\n  CATEGORY_CREATE_SUCCESS,\n  CATEGORY_DETAILS_FAIL,\n  CATEGORY_DETAILS_REQUEST,\n  CATEGORY_DETAILS_SUCCESS,\n  CATEGORY_LIST_FAIL,\n  CATEGORY_LIST_REQUEST,\n  CATEGORY_LIST_SUCCESS,\n  CATEGORY_UPDATE_FAIL,\n  CATEGORY_UPDATE_REQUEST,\n  CATEGORY_UPDATE_SUCCESS,\n} from \"../constants/categoryConstants\";\n\n// my way, Fuad only has added authrization info\n// export const listCategories = () => async (dispatch) => {\n//   dispatch({\n//     type: CATEGORY_LIST_REQUEST,\n//   });\n//   try {\n//     const { data } = await Axios.get(\"/api/categories\");\n//     dispatch({ type: CATEGORY_LIST_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({ type: CATEGORY_LIST_FAIL, payload: error.message });\n//   }\n// };\n\nexport const listCategories = () => async (dispatch, getState) => {\n  dispatch({ type: CATEGORY_LIST_REQUEST });\n  try {\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    const { data } = await Axios.get(\"/api/categories\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    });\n    dispatch({ type: CATEGORY_LIST_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: CATEGORY_LIST_FAIL, payload: message });\n  }\n};\n\nexport const createCategory = () => async (dispatch, getState) => {\n  dispatch({ type: CATEGORY_CREATE_REQUEST });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n  console.log(userInfo);\n  try {\n    const { data } = await Axios.post(\n      \"/api/categories\",\n      {},\n      {\n        headers: { Authorization: `Bearer ${userInfo.token}` },\n      }\n    );\n    dispatch({\n      type: CATEGORY_CREATE_SUCCESS,\n      payload: data.category,\n    });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: CATEGORY_CREATE_FAIL, payload: message });\n  }\n};\n\n// we need detailsCategory for the time when we do edite category\nexport const detailsCategory = (categoryId) => async (dispatch) => {\n  dispatch({ type: CATEGORY_DETAILS_REQUEST, payload: categoryId });\n  try {\n    const { data } = await Axios.get(`/api/categories/${categoryId}`);\n    dispatch({ type: CATEGORY_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n//\nexport const updateCategory = (category) => async (dispatch, getState) => {\n  dispatch({ type: CATEGORY_UPDATE_REQUEST, payload: category });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n\n  try {\n    const { data } = await Axios.put(\n      `/api/categories/${category._id}`,\n      category,\n      {\n        headers: { Authorization: `Bearer ${userInfo.token}` },\n      }\n    );\n    dispatch({ type: CATEGORY_UPDATE_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: CATEGORY_UPDATE_FAIL, payload: message });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}