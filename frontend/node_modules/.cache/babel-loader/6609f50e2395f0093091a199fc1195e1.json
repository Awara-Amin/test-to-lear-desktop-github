{"ast":null,"code":"import _regeneratorRuntime from \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/src/screens/MapScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { useDispatch } from 'react-redux';\nvar libs = ['places'];\nvar defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nexport default function MapScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      googleApiKey = _useState2[0],\n      setGoogleApiKey = _useState2[1];\n\n  var _useState3 = useState(defaultLocation),\n      _useState4 = _slicedToArray(_useState3, 2),\n      center = _useState4[0],\n      setCenter = _useState4[1];\n\n  var _useState5 = useState(center),\n      _useState6 = _slicedToArray(_useState5, 2),\n      location = _useState6[0],\n      setLocation = _useState6[1];\n\n  var mapRef = useRef(null);\n  var placeRef = useRef(null);\n  var markerRef = useRef(null);\n  useEffect(function () {\n    var fetch = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$Axios, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Axios('/api/config/google');\n\n              case 2:\n                _yield$Axios = _context.sent;\n                data = _yield$Axios.data;\n                setGoogleApiKey(data);\n                getUserCurrentLocation();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetch() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetch();\n  }, []);\n\n  var onLoad = function onLoad(map) {\n    mapRef.current = map;\n  };\n\n  var onMarkerLoad = function onMarkerLoad(marker) {\n    markerRef.current = marker;\n  };\n\n  var onLoadPlaces = function onLoadPlaces(place) {\n    placeRef.current = place;\n  };\n\n  var onIdle = function onIdle() {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n\n  var onPlacesChanged = function onPlacesChanged() {\n    var place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n\n  var dispatch = useDispatch();\n\n  var onConfirm = function onConfirm() {\n    var places = placeRef.current.getPlaces();\n\n    if (places && places.length === 1) {\n      // dispatch select action\n      dispatch({\n        type: USER_ADDRESS_MAP_CONFIRM,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id\n        }\n      });\n      alert('location selected successfully.');\n      props.history.push('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  var getUserCurrentLocation = function getUserCurrentLocation() {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"full-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoadScript, {\n    libraries: libs,\n    googleMapsApiKey: googleApiKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    id: \"smaple-map\",\n    mapContainerStyle: {\n      height: '100%',\n      width: '100%'\n    },\n    center: center,\n    zoom: 15,\n    onLoad: onLoad,\n    onIdle: onIdle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StandaloneSearchBox, {\n    onLoad: onLoadPlaces,\n    onPlacesChanged: onPlacesChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-input-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"primary\",\n    onClick: onConfirm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"Confirm\"))), /*#__PURE__*/React.createElement(Marker, {\n    position: location,\n    onLoad: onMarkerLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  })))) : /*#__PURE__*/React.createElement(LoadingBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/bootStarp-amazona/amazona/frontend/src/screens/MapScreen.js"],"names":["React","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","LoadingBox","Axios","USER_ADDRESS_MAP_CONFIRM","useDispatch","libs","defaultLocation","lat","lng","MapScreen","props","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","fetch","data","getUserCurrentLocation","onLoad","map","current","onMarkerLoad","marker","onLoadPlaces","place","onIdle","onPlacesChanged","getPlaces","geometry","dispatch","onConfirm","places","length","type","payload","address","formatted_address","name","vicinity","googleAddressId","id","alert","history","push","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport {\n  LoadScript,\n  GoogleMap,\n  StandaloneSearchBox,\n  Marker,\n} from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { useDispatch } from 'react-redux';\n\nconst libs = ['places'];\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\n\nexport default function MapScreen(props) {\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await Axios('/api/config/google');\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n    fetch();\n  }, []);\n\n  const onLoad = (map) => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = (marker) => {\n    markerRef.current = marker;\n  };\n  const onLoadPlaces = (place) => {\n    placeRef.current = place;\n  };\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng(),\n    });\n  };\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({ lat: place.lat(), lng: place.lng() });\n    setLocation({ lat: place.lat(), lng: place.lng() });\n  };\n  const dispatch = useDispatch();\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n    if (places && places.length === 1) {\n      // dispatch select action\n      dispatch({\n        type: USER_ADDRESS_MAP_CONFIRM,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id,\n        },\n      });\n      alert('location selected successfully.');\n      props.history.push('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? (\n    <div className=\"full-container\">\n      <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\n        <GoogleMap\n          id=\"smaple-map\"\n          mapContainerStyle={{ height: '100%', width: '100%' }}\n          center={center}\n          zoom={15}\n          onLoad={onLoad}\n          onIdle={onIdle}\n        >\n          <StandaloneSearchBox\n            onLoad={onLoadPlaces}\n            onPlacesChanged={onPlacesChanged}\n          >\n            <div className=\"map-input-box\">\n              <input type=\"text\" placeholder=\"Enter your address\"></input>\n              <button type=\"button\" className=\"primary\" onClick={onConfirm}>\n                Confirm\n              </button>\n            </div>\n          </StandaloneSearchBox>\n          <Marker position={location} onLoad={onMarkerLoad}></Marker>\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  ) : (\n    <LoadingBox></LoadingBox>\n  );\n}"]},"metadata":{},"sourceType":"module"}