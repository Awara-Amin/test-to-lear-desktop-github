{"ast":null,"code":"import Axios from \"axios\";\nimport { CATEGORY_LIST_FAIL, CATEGORY_LIST_REQUEST, CATEGORY_LIST_SUCCESS } from \"../constants/categoryConstants\"; // my way, Fuad only has added authrization info\n// export const listCategories = () => async (dispatch) => {\n//   dispatch({\n//     type: CATEGORY_LIST_REQUEST,\n//   });\n//   try {\n//     const { data } = await Axios.get(\"/api/categories\");\n//     dispatch({ type: CATEGORY_LIST_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({ type: CATEGORY_LIST_FAIL, payload: error.message });\n//   }\n// };\n\nexport const listCategories = () => async (dispatch, getState) => {\n  dispatch({\n    type: CATEGORY_LIST_REQUEST\n  });\n\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get(\"/api/categories\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: CATEGORY_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: CATEGORY_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createCategory = () => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_CREATE_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  console.log(userInfo);\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/products\", {}, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: PRODUCT_CREATE_SUCCESS,\n      payload: data.product\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: PRODUCT_CREATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/amazona-1/amazona/frontend/src/actions/categoryActions.js"],"names":["Axios","CATEGORY_LIST_FAIL","CATEGORY_LIST_REQUEST","CATEGORY_LIST_SUCCESS","listCategories","dispatch","getState","type","userSignin","userInfo","data","get","headers","Authorization","token","payload","error","message","response","createCategory","PRODUCT_CREATE_REQUEST","console","log","post","PRODUCT_CREATE_SUCCESS","product","PRODUCT_CREATE_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,kBADF,EAEEC,qBAFF,EAGEC,qBAHF,QAIO,gCAJP,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAChED,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AACJM,MAAAA,UAAU,EAAE;AAAEC,QAAAA;AAAF;AADR,QAEFH,QAAQ,EAFZ;AAGA,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMV,KAAK,CAACW,GAAN,CAAU,iBAAV,EAA6B;AAClDC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASJ,QAAQ,CAACK,KAAM;AADjC;AADyC,KAA7B,CAAvB;AAKAT,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEJ,qBAAR;AAA+BY,MAAAA,OAAO,EAAEL;AAAxC,KAAD,CAAR;AACD,GAVD,CAUE,OAAOM,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OADxB,GAEID,KAAK,CAACC,OAHZ;AAIAZ,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEN,kBAAR;AAA4Bc,MAAAA,OAAO,EAAEE;AAArC,KAAD,CAAR;AACD;AACF,CAnBM;AAqBP,OAAO,MAAME,cAAc,GAAG,MAAM,OAAOd,QAAP,EAAiBC,QAAjB,KAA8B;AAChED,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEa;AAAR,GAAD,CAAR;AACA,QAAM;AACJZ,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AADR,MAEFH,QAAQ,EAFZ;AAGAe,EAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;;AACA,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMV,KAAK,CAACuB,IAAN,CACrB,eADqB,EAErB,EAFqB,EAGrB;AACEX,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASJ,QAAQ,CAACK,KAAM;AAA1C;AADX,KAHqB,CAAvB;AAOAT,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEiB,sBADC;AAEPT,MAAAA,OAAO,EAAEL,IAAI,CAACe;AAFP,KAAD,CAAR;AAID,GAZD,CAYE,OAAOT,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OADxB,GAEID,KAAK,CAACC,OAHZ;AAIAZ,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEmB,mBAAR;AAA6BX,MAAAA,OAAO,EAAEE;AAAtC,KAAD,CAAR;AACD;AACF,CAzBM","sourcesContent":["import Axios from \"axios\";\n\nimport {\n  CATEGORY_LIST_FAIL,\n  CATEGORY_LIST_REQUEST,\n  CATEGORY_LIST_SUCCESS,\n} from \"../constants/categoryConstants\";\n\n// my way, Fuad only has added authrization info\n// export const listCategories = () => async (dispatch) => {\n//   dispatch({\n//     type: CATEGORY_LIST_REQUEST,\n//   });\n//   try {\n//     const { data } = await Axios.get(\"/api/categories\");\n//     dispatch({ type: CATEGORY_LIST_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({ type: CATEGORY_LIST_FAIL, payload: error.message });\n//   }\n// };\n\nexport const listCategories = () => async (dispatch, getState) => {\n  dispatch({ type: CATEGORY_LIST_REQUEST });\n  try {\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    const { data } = await Axios.get(\"/api/categories\", {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    });\n    dispatch({ type: CATEGORY_LIST_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: CATEGORY_LIST_FAIL, payload: message });\n  }\n};\n\nexport const createCategory = () => async (dispatch, getState) => {\n  dispatch({ type: PRODUCT_CREATE_REQUEST });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n  console.log(userInfo);\n  try {\n    const { data } = await Axios.post(\n      \"/api/products\",\n      {},\n      {\n        headers: { Authorization: `Bearer ${userInfo.token}` },\n      }\n    );\n    dispatch({\n      type: PRODUCT_CREATE_SUCCESS,\n      payload: data.product,\n    });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: PRODUCT_CREATE_FAIL, payload: message });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}