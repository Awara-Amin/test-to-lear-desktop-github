{"ast":null,"code":"var _jsxFileName = \"/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/react/amazona/frontend/src/screens/UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { detailsUser, updateUser } from '../actions/userActions';\nimport LoadingBox from '../components/LoadingBox';\nimport MessageBox from '../components/MessageBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserEditScreen(props) {\n  _s();\n\n  console.log(props);\n  const userId = props.match.params.id;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isSeller, setIsSeller] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUdate\n  } = userUpdate;\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (successUdate) {\n      props.history.push('/userlist');\n    }\n\n    if (!user) {\n      dispatch(detailsUser(userId));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n      setIsSeller(user.isSeller);\n      setIsAdmin(user.isAdmin);\n    }\n  }, [dispatch, user, userId]);\n\n  const submitHandler = e => {\n    e.preventDefault(); //  dispatch update user\n\n    dispatch(updateUser({\n      _id: userId,\n      name,\n      email,\n      isSeller,\n      isAdmin\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Edit User \", name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 18\n        }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 36\n        }, this), errorUpdate && /*#__PURE__*/_jsxDEV(MessageBox, {\n          variant: \"danger\",\n          children: errorUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 18\n      }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 26\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"name\",\n            type: \"text\",\n            placeholder: \"Enter Name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"email\",\n            type: \"email\",\n            placeholder: \"Enter Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"isSeller\",\n            children: \"Is Seller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"isSeller\",\n            type: \"checkbox\",\n            checked: isSeller,\n            onChange: e => setIsSeller(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"isAdmin\",\n            children: \"Is Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"isAdmin\",\n            type: \"checkbox\",\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"primary\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n}\n\n_s(UserEditScreen, \"gENE2eXtnc2Xu0t4V9eg3Pbm9xM=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["/Users/awaraamin/2020/The-complete-2020-Web-Development-Bootcamp/practice/react/amazona/frontend/src/screens/UserEditScreen.js"],"names":["React","useState","useEffect","useDispatch","useSelector","detailsUser","updateUser","LoadingBox","MessageBox","UserEditScreen","props","console","log","userId","match","params","id","name","setName","email","setEmail","isSeller","setIsSeller","isAdmin","setIsAdmin","userUpdate","state","loading","loadingUpdate","error","errorUpdate","success","successUdate","userDetails","user","dispatch","history","push","submitHandler","e","preventDefault","_id","target","value","checked"],"mappings":"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","sourcesContent":[" import React,{useState, useEffect} from 'react';\n import {useDispatch, useSelector} from 'react-redux';\nimport { detailsUser, updateUser } from '../actions/userActions';\nimport LoadingBox from '../components/LoadingBox'\nimport MessageBox from '../components/MessageBox';\n \n export default function UserEditScreen(props) {\n     console.log(props)\n     const userId = props.match.params.id;\n\n\n     const [name, setName] = useState('');\n     const [email, setEmail] = useState('');\n     const [isSeller, setIsSeller] = useState(false);\n     const [isAdmin, setIsAdmin] = useState(false);\n\n     const userUpdate = useSelector(state => state.userUpdate);\n     const {loading: loadingUpdate, error:errorUpdate, success: successUdate} = userUpdate;\n\n\n     const userDetails = useSelector(state => state.userDetails);\n     const {loading, error, user} = userDetails;\n\n     const dispatch = useDispatch();\n\n\n     useEffect(() => {\n         if(successUdate){\n             props.history.push('/userlist')\n         }\n\n         if(!user) {\n             dispatch(detailsUser(userId));\n         } else{\n             setName(user.name);\n             setEmail(user.email);\n             setIsSeller(user.isSeller)\n             setIsAdmin(user.isAdmin)\n         }\n     },[dispatch, user, userId])\n\n\n\n     const submitHandler = (e) => {\n         e.preventDefault();\n        //  dispatch update user\n        dispatch(updateUser({_id:userId, name, email, isSeller, isAdmin}));\n\n     };\n\n     return (\n         <div>\n             <form className=\"form\" onSubmit={submitHandler}>\n                 <div>\n                 <h1>Edit User {name}</h1>\n                 {loadingUpdate && <LoadingBox></LoadingBox>}\n                 {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>}\n\n                 </div>\n                 {loading ? <LoadingBox></LoadingBox>\n                 : \n                 error ? <MessageBox variant=\"danger\">{error}</MessageBox>\n                 : \n                 <>\n                 <div>\n                     <label htmlFor=\"name\">Name</label>\n                     <input \n                     id=\"name\"\n                     type=\"text\"\n                     placeholder=\"Enter Name\"\n                     value={name}\n                     onChange={(e) => setName(e.target.value)}\n                     ></input>\n                 </div>\n\n                 <div>\n                     <label htmlFor=\"email\">Email</label>\n                     <input \n                     id=\"email\"\n                     type=\"email\"\n                     placeholder=\"Enter Email\"\n                     value={email}\n                     onChange={(e) => setEmail(e.target.value)}\n                     ></input>\n                 </div>\n\n                 <div>\n                     <label htmlFor=\"isSeller\">Is Seller</label>\n                     <input \n                     id=\"isSeller\"\n                     type=\"checkbox\"\n                     checked={isSeller}\n                     onChange={(e) => setIsSeller(e.target.checked)}\n                     ></input>\n                 </div>\n\n\n                 <div>\n                     <label htmlFor=\"isAdmin\">Is Admin</label>\n                     <input \n                     id=\"isAdmin\"\n                     type=\"checkbox\"\n                     checked={isAdmin}\n                     onChange={(e) => setIsAdmin(e.target.checked)}\n                     ></input>\n                 </div>\n\n                 <div>\n                     <button type=\"submit\" className=\"primary\">\n                         Update\n                    </button>\n                 </div>\n\n                 </>\n                 \n                }\n                 \n             </form>\n             \n         </div>\n     )\n }\n "]},"metadata":{},"sourceType":"module"}